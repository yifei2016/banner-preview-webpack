import React from 'react';
import PropTypes from 'prop-types';
import curry from 'curry';

export const filter = curry((callback, array) => array.filter(callback));
export const find = curry((callback, array) => array.find(callback));

export const pipe = curry((arrayOfFunctions, data) => {
  let result = data;
  arrayOfFunctions.forEach(fn => {
    result = fn(result);
  });

  return result;
});

export const View = ({ children }) =>
  <div>
    {children}
  </div>;

View.propTypes = {
  children: PropTypes.node,
  viewId: PropTypes.string.isRequired
};

export const isView = view => View.prototype === view.type.prototype;
export const getOnlyViewComponents = filter(isView);
export const extractViews = (props) =>
  pipe([rProps => rProps.children, React.Children.toArray, getOnlyViewComponents])(props);

export const findViewById = (id, views) => find(view => view.props.viewId === id, views);

export class Switch extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      views: []
    };
  }

  componentWillMount() {
    this.setState({ views: extractViews(this.props) });
  }

  render() {
    const view = findViewById(this.props.current, this.state.views);

    if (view) {
      return view.props.children;
    } else if (!view && this.props.placeholder) {
      const Placeholder = this.props.placeholder;
      return <Placeholder />;
    }

    return null;
  }
}

Switch.propTypes = {
  placeholder: PropTypes.func,
  children: PropTypes.node,
  current: PropTypes.string
};

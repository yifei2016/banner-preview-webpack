'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Switch = exports.findViewById = exports.extractViews = exports.getOnlyViewComponents = exports.isView = exports.View = exports.pipe = exports.find = exports.filter = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _curry = require('curry');

var _curry2 = _interopRequireDefault(_curry);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var filter = exports.filter = (0, _curry2.default)(function (callback, array) {
  return array.filter(callback);
});
var find = exports.find = (0, _curry2.default)(function (callback, array) {
  return array.find(callback);
});

var pipe = exports.pipe = (0, _curry2.default)(function (arrayOfFunctions, data) {
  var result = data;
  arrayOfFunctions.forEach(function (fn) {
    result = fn(result);
  });

  return result;
});

var View = exports.View = function View(_ref) {
  var children = _ref.children;
  return _react2.default.createElement(
    'div',
    null,
    children
  );
};

View.propTypes = {
  children: _propTypes2.default.node,
  viewId: _propTypes2.default.string.isRequired
};

var isView = exports.isView = function isView(view) {
  return View.prototype === view.type.prototype;
};
var getOnlyViewComponents = exports.getOnlyViewComponents = filter(isView);
var extractViews = exports.extractViews = function extractViews(props) {
  return pipe([function (rProps) {
    return rProps.children;
  }, _react2.default.Children.toArray, getOnlyViewComponents])(props);
};

var findViewById = exports.findViewById = function findViewById(id, views) {
  return find(function (view) {
    return view.props.viewId === id;
  }, views);
};

var Switch = exports.Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch(props) {
    _classCallCheck(this, Switch);

    var _this = _possibleConstructorReturn(this, (Switch.__proto__ || Object.getPrototypeOf(Switch)).call(this, props));

    _this.state = {
      views: []
    };
    return _this;
  }

  _createClass(Switch, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      this.setState({ views: extractViews(this.props) });
    }
  }, {
    key: 'render',
    value: function render() {
      var view = findViewById(this.props.current, this.state.views);

      if (view) {
        return view.props.children;
      } else if (!view && this.props.placeholder) {
        var Placeholder = this.props.placeholder;
        return _react2.default.createElement(Placeholder, null);
      }

      return null;
    }
  }]);

  return Switch;
}(_react2.default.Component);

Switch.propTypes = {
  placeholder: _propTypes2.default.func,
  children: _propTypes2.default.node,
  current: _propTypes2.default.string
};